// Copyright (c) 2022, Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: narwhal.proto

package narwhal

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CollectionErrorType int32

const (
	CollectionErrorType_COLLECTION_NOT_FOUND CollectionErrorType = 0
	CollectionErrorType_COLLECTION_TIMEOUT   CollectionErrorType = 1
	CollectionErrorType_COLLECTION_ERROR     CollectionErrorType = 2
)

// Enum value maps for CollectionErrorType.
var (
	CollectionErrorType_name = map[int32]string{
		0: "COLLECTION_NOT_FOUND",
		1: "COLLECTION_TIMEOUT",
		2: "COLLECTION_ERROR",
	}
	CollectionErrorType_value = map[string]int32{
		"COLLECTION_NOT_FOUND": 0,
		"COLLECTION_TIMEOUT":   1,
		"COLLECTION_ERROR":     2,
	}
)

func (x CollectionErrorType) Enum() *CollectionErrorType {
	p := new(CollectionErrorType)
	*p = x
	return p
}

func (x CollectionErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CollectionErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_narwhal_proto_enumTypes[0].Descriptor()
}

func (CollectionErrorType) Type() protoreflect.EnumType {
	return &file_narwhal_proto_enumTypes[0]
}

func (x CollectionErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CollectionErrorType.Descriptor instead.
func (CollectionErrorType) EnumDescriptor() ([]byte, []int) {
	return file_narwhal_proto_rawDescGZIP(), []int{0}
}

type CertificateDigest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Digest []byte `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *CertificateDigest) Reset() {
	*x = CertificateDigest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_narwhal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateDigest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateDigest) ProtoMessage() {}

func (x *CertificateDigest) ProtoReflect() protoreflect.Message {
	mi := &file_narwhal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateDigest.ProtoReflect.Descriptor instead.
func (*CertificateDigest) Descriptor() ([]byte, []int) {
	return file_narwhal_proto_rawDescGZIP(), []int{0}
}

func (x *CertificateDigest) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

type BatchDigest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Digest []byte `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *BatchDigest) Reset() {
	*x = BatchDigest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_narwhal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDigest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDigest) ProtoMessage() {}

func (x *BatchDigest) ProtoReflect() protoreflect.Message {
	mi := &file_narwhal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDigest.ProtoReflect.Descriptor instead.
func (*BatchDigest) Descriptor() ([]byte, []int) {
	return file_narwhal_proto_rawDescGZIP(), []int{1}
}

func (x *BatchDigest) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

type Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction []*Transaction `protobuf:"bytes,1,rep,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *Batch) Reset() {
	*x = Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_narwhal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Batch) ProtoMessage() {}

func (x *Batch) ProtoReflect() protoreflect.Message {
	mi := &file_narwhal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Batch.ProtoReflect.Descriptor instead.
func (*Batch) Descriptor() ([]byte, []int) {
	return file_narwhal_proto_rawDescGZIP(), []int{2}
}

func (x *Batch) GetTransaction() []*Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction []byte `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_narwhal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_narwhal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_narwhal_proto_rawDescGZIP(), []int{3}
}

func (x *Transaction) GetTransaction() []byte {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type CollectionError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *CertificateDigest  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Error CollectionErrorType `protobuf:"varint,2,opt,name=error,proto3,enum=narwhal.CollectionErrorType" json:"error,omitempty"`
}

func (x *CollectionError) Reset() {
	*x = CollectionError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_narwhal_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionError) ProtoMessage() {}

func (x *CollectionError) ProtoReflect() protoreflect.Message {
	mi := &file_narwhal_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionError.ProtoReflect.Descriptor instead.
func (*CollectionError) Descriptor() ([]byte, []int) {
	return file_narwhal_proto_rawDescGZIP(), []int{4}
}

func (x *CollectionError) GetId() *CertificateDigest {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CollectionError) GetError() CollectionErrorType {
	if x != nil {
		return x.Error
	}
	return CollectionErrorType_COLLECTION_NOT_FOUND
}

type BatchMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *BatchDigest `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Transactions *Batch       `protobuf:"bytes,2,opt,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *BatchMessage) Reset() {
	*x = BatchMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_narwhal_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchMessage) ProtoMessage() {}

func (x *BatchMessage) ProtoReflect() protoreflect.Message {
	mi := &file_narwhal_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchMessage.ProtoReflect.Descriptor instead.
func (*BatchMessage) Descriptor() ([]byte, []int) {
	return file_narwhal_proto_rawDescGZIP(), []int{5}
}

func (x *BatchMessage) GetId() *BatchDigest {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BatchMessage) GetTransactions() *Batch {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type PrimaryAddresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryToPrimary *MultiAddr `protobuf:"bytes,1,opt,name=primary_to_primary,json=primaryToPrimary,proto3" json:"primary_to_primary,omitempty"`
	WorkerToPrimary  *MultiAddr `protobuf:"bytes,2,opt,name=worker_to_primary,json=workerToPrimary,proto3" json:"worker_to_primary,omitempty"`
}

func (x *PrimaryAddresses) Reset() {
	*x = PrimaryAddresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_narwhal_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimaryAddresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryAddresses) ProtoMessage() {}

func (x *PrimaryAddresses) ProtoReflect() protoreflect.Message {
	mi := &file_narwhal_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryAddresses.ProtoReflect.Descriptor instead.
func (*PrimaryAddresses) Descriptor() ([]byte, []int) {
	return file_narwhal_proto_rawDescGZIP(), []int{6}
}

func (x *PrimaryAddresses) GetPrimaryToPrimary() *MultiAddr {
	if x != nil {
		return x.PrimaryToPrimary
	}
	return nil
}

func (x *PrimaryAddresses) GetWorkerToPrimary() *MultiAddr {
	if x != nil {
		return x.WorkerToPrimary
	}
	return nil
}

type MultiAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *MultiAddr) Reset() {
	*x = MultiAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_narwhal_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiAddr) ProtoMessage() {}

func (x *MultiAddr) ProtoReflect() protoreflect.Message {
	mi := &file_narwhal_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiAddr.ProtoReflect.Descriptor instead.
func (*MultiAddr) Descriptor() ([]byte, []int) {
	return file_narwhal_proto_rawDescGZIP(), []int{7}
}

func (x *MultiAddr) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type PublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes []byte `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *PublicKey) Reset() {
	*x = PublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_narwhal_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKey) ProtoMessage() {}

func (x *PublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_narwhal_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKey.ProtoReflect.Descriptor instead.
func (*PublicKey) Descriptor() ([]byte, []int) {
	return file_narwhal_proto_rawDescGZIP(), []int{8}
}

func (x *PublicKey) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type ValidatorData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey        *PublicKey        `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	StakeWeight      int64             `protobuf:"varint,2,opt,name=stake_weight,json=stakeWeight,proto3" json:"stake_weight,omitempty"`
	PrimaryAddresses *PrimaryAddresses `protobuf:"bytes,3,opt,name=primary_addresses,json=primaryAddresses,proto3" json:"primary_addresses,omitempty"`
}

func (x *ValidatorData) Reset() {
	*x = ValidatorData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_narwhal_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorData) ProtoMessage() {}

func (x *ValidatorData) ProtoReflect() protoreflect.Message {
	mi := &file_narwhal_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorData.ProtoReflect.Descriptor instead.
func (*ValidatorData) Descriptor() ([]byte, []int) {
	return file_narwhal_proto_rawDescGZIP(), []int{9}
}

func (x *ValidatorData) GetPublicKey() *PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *ValidatorData) GetStakeWeight() int64 {
	if x != nil {
		return x.StakeWeight
	}
	return 0
}

func (x *ValidatorData) GetPrimaryAddresses() *PrimaryAddresses {
	if x != nil {
		return x.PrimaryAddresses
	}
	return nil
}

type CollectionRetrievalResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RetrievalResult:
	//	*CollectionRetrievalResult_Batch
	//	*CollectionRetrievalResult_Error
	RetrievalResult isCollectionRetrievalResult_RetrievalResult `protobuf_oneof:"retrieval_result"`
}

func (x *CollectionRetrievalResult) Reset() {
	*x = CollectionRetrievalResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_narwhal_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionRetrievalResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionRetrievalResult) ProtoMessage() {}

func (x *CollectionRetrievalResult) ProtoReflect() protoreflect.Message {
	mi := &file_narwhal_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionRetrievalResult.ProtoReflect.Descriptor instead.
func (*CollectionRetrievalResult) Descriptor() ([]byte, []int) {
	return file_narwhal_proto_rawDescGZIP(), []int{10}
}

func (m *CollectionRetrievalResult) GetRetrievalResult() isCollectionRetrievalResult_RetrievalResult {
	if m != nil {
		return m.RetrievalResult
	}
	return nil
}

func (x *CollectionRetrievalResult) GetBatch() *BatchMessage {
	if x, ok := x.GetRetrievalResult().(*CollectionRetrievalResult_Batch); ok {
		return x.Batch
	}
	return nil
}

func (x *CollectionRetrievalResult) GetError() *CollectionError {
	if x, ok := x.GetRetrievalResult().(*CollectionRetrievalResult_Error); ok {
		return x.Error
	}
	return nil
}

type isCollectionRetrievalResult_RetrievalResult interface {
	isCollectionRetrievalResult_RetrievalResult()
}

type CollectionRetrievalResult_Batch struct {
	Batch *BatchMessage `protobuf:"bytes,1,opt,name=batch,proto3,oneof"`
}

type CollectionRetrievalResult_Error struct {
	Error *CollectionError `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*CollectionRetrievalResult_Batch) isCollectionRetrievalResult_RetrievalResult() {}

func (*CollectionRetrievalResult_Error) isCollectionRetrievalResult_RetrievalResult() {}

type GetCollectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of collections to be retreived.
	CollectionIds []*CertificateDigest `protobuf:"bytes,1,rep,name=collection_ids,json=collectionIds,proto3" json:"collection_ids,omitempty"`
}

func (x *GetCollectionsRequest) Reset() {
	*x = GetCollectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_narwhal_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectionsRequest) ProtoMessage() {}

func (x *GetCollectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_narwhal_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectionsRequest.ProtoReflect.Descriptor instead.
func (*GetCollectionsRequest) Descriptor() ([]byte, []int) {
	return file_narwhal_proto_rawDescGZIP(), []int{11}
}

func (x *GetCollectionsRequest) GetCollectionIds() []*CertificateDigest {
	if x != nil {
		return x.CollectionIds
	}
	return nil
}

type GetCollectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: Revisit this for spec compliance.
	// List of retrieval results of collections.
	Result []*CollectionRetrievalResult `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *GetCollectionsResponse) Reset() {
	*x = GetCollectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_narwhal_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectionsResponse) ProtoMessage() {}

func (x *GetCollectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_narwhal_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectionsResponse.ProtoReflect.Descriptor instead.
func (*GetCollectionsResponse) Descriptor() ([]byte, []int) {
	return file_narwhal_proto_rawDescGZIP(), []int{12}
}

func (x *GetCollectionsResponse) GetResult() []*CollectionRetrievalResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type RemoveCollectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of collections to be removed.
	CollectionIds []*CertificateDigest `protobuf:"bytes,1,rep,name=collection_ids,json=collectionIds,proto3" json:"collection_ids,omitempty"`
}

func (x *RemoveCollectionsRequest) Reset() {
	*x = RemoveCollectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_narwhal_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCollectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCollectionsRequest) ProtoMessage() {}

func (x *RemoveCollectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_narwhal_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCollectionsRequest.ProtoReflect.Descriptor instead.
func (*RemoveCollectionsRequest) Descriptor() ([]byte, []int) {
	return file_narwhal_proto_rawDescGZIP(), []int{13}
}

func (x *RemoveCollectionsRequest) GetCollectionIds() []*CertificateDigest {
	if x != nil {
		return x.CollectionIds
	}
	return nil
}

type ReadCausalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A collection for which a sequence of related collections are to be retrieved.
	CollectionId *CertificateDigest `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
}

func (x *ReadCausalRequest) Reset() {
	*x = ReadCausalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_narwhal_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadCausalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCausalRequest) ProtoMessage() {}

func (x *ReadCausalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_narwhal_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCausalRequest.ProtoReflect.Descriptor instead.
func (*ReadCausalRequest) Descriptor() ([]byte, []int) {
	return file_narwhal_proto_rawDescGZIP(), []int{14}
}

func (x *ReadCausalRequest) GetCollectionId() *CertificateDigest {
	if x != nil {
		return x.CollectionId
	}
	return nil
}

type ReadCausalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resulting sequence of collections from DAG walk.
	CollectionIds []*CertificateDigest `protobuf:"bytes,1,rep,name=collection_ids,json=collectionIds,proto3" json:"collection_ids,omitempty"`
}

func (x *ReadCausalResponse) Reset() {
	*x = ReadCausalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_narwhal_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadCausalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCausalResponse) ProtoMessage() {}

func (x *ReadCausalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_narwhal_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCausalResponse.ProtoReflect.Descriptor instead.
func (*ReadCausalResponse) Descriptor() ([]byte, []int) {
	return file_narwhal_proto_rawDescGZIP(), []int{15}
}

func (x *ReadCausalResponse) GetCollectionIds() []*CertificateDigest {
	if x != nil {
		return x.CollectionIds
	}
	return nil
}

type RoundsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The validator's key for which we want to retrieve
	/// the available rounds.
	PublicKey *PublicKey `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *RoundsRequest) Reset() {
	*x = RoundsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_narwhal_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundsRequest) ProtoMessage() {}

func (x *RoundsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_narwhal_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundsRequest.ProtoReflect.Descriptor instead.
func (*RoundsRequest) Descriptor() ([]byte, []int) {
	return file_narwhal_proto_rawDescGZIP(), []int{16}
}

func (x *RoundsRequest) GetPublicKey() *PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type RoundsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The oldest round for which the node has available
	/// blocks to propose for the defined validator.
	OldestRound uint64 `protobuf:"varint,1,opt,name=oldest_round,json=oldestRound,proto3" json:"oldest_round,omitempty"`
	/// The newest (latest) round for which the node has available
	/// blocks to propose for the defined validator.
	NewestRound uint64 `protobuf:"varint,2,opt,name=newest_round,json=newestRound,proto3" json:"newest_round,omitempty"`
}

func (x *RoundsResponse) Reset() {
	*x = RoundsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_narwhal_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundsResponse) ProtoMessage() {}

func (x *RoundsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_narwhal_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundsResponse.ProtoReflect.Descriptor instead.
func (*RoundsResponse) Descriptor() ([]byte, []int) {
	return file_narwhal_proto_rawDescGZIP(), []int{17}
}

func (x *RoundsResponse) GetOldestRound() uint64 {
	if x != nil {
		return x.OldestRound
	}
	return 0
}

func (x *RoundsResponse) GetNewestRound() uint64 {
	if x != nil {
		return x.NewestRound
	}
	return 0
}

type NodeReadCausalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey *PublicKey `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Round     uint64     `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *NodeReadCausalRequest) Reset() {
	*x = NodeReadCausalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_narwhal_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeReadCausalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeReadCausalRequest) ProtoMessage() {}

func (x *NodeReadCausalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_narwhal_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeReadCausalRequest.ProtoReflect.Descriptor instead.
func (*NodeReadCausalRequest) Descriptor() ([]byte, []int) {
	return file_narwhal_proto_rawDescGZIP(), []int{18}
}

func (x *NodeReadCausalRequest) GetPublicKey() *PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *NodeReadCausalRequest) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

type NodeReadCausalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resulting sequence of collections from DAG walk.
	CollectionIds []*CertificateDigest `protobuf:"bytes,1,rep,name=collection_ids,json=collectionIds,proto3" json:"collection_ids,omitempty"`
}

func (x *NodeReadCausalResponse) Reset() {
	*x = NodeReadCausalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_narwhal_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeReadCausalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeReadCausalResponse) ProtoMessage() {}

func (x *NodeReadCausalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_narwhal_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeReadCausalResponse.ProtoReflect.Descriptor instead.
func (*NodeReadCausalResponse) Descriptor() ([]byte, []int) {
	return file_narwhal_proto_rawDescGZIP(), []int{19}
}

func (x *NodeReadCausalResponse) GetCollectionIds() []*CertificateDigest {
	if x != nil {
		return x.CollectionIds
	}
	return nil
}

type NewNetworkInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpochNumber uint32           `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	Validators  []*ValidatorData `protobuf:"bytes,2,rep,name=validators,proto3" json:"validators,omitempty"`
}

func (x *NewNetworkInfoRequest) Reset() {
	*x = NewNetworkInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_narwhal_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewNetworkInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewNetworkInfoRequest) ProtoMessage() {}

func (x *NewNetworkInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_narwhal_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewNetworkInfoRequest.ProtoReflect.Descriptor instead.
func (*NewNetworkInfoRequest) Descriptor() ([]byte, []int) {
	return file_narwhal_proto_rawDescGZIP(), []int{20}
}

func (x *NewNetworkInfoRequest) GetEpochNumber() uint32 {
	if x != nil {
		return x.EpochNumber
	}
	return 0
}

func (x *NewNetworkInfoRequest) GetValidators() []*ValidatorData {
	if x != nil {
		return x.Validators
	}
	return nil
}

type NewEpochRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpochNumber uint32           `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	Validators  []*ValidatorData `protobuf:"bytes,2,rep,name=validators,proto3" json:"validators,omitempty"`
}

func (x *NewEpochRequest) Reset() {
	*x = NewEpochRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_narwhal_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewEpochRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewEpochRequest) ProtoMessage() {}

func (x *NewEpochRequest) ProtoReflect() protoreflect.Message {
	mi := &file_narwhal_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewEpochRequest.ProtoReflect.Descriptor instead.
func (*NewEpochRequest) Descriptor() ([]byte, []int) {
	return file_narwhal_proto_rawDescGZIP(), []int{21}
}

func (x *NewEpochRequest) GetEpochNumber() uint32 {
	if x != nil {
		return x.EpochNumber
	}
	return 0
}

func (x *NewEpochRequest) GetValidators() []*ValidatorData {
	if x != nil {
		return x.Validators
	}
	return nil
}

// A bincode encoded payload. This is intended to be used in the short-term
// while we don't have good protobuf definitions for Narwhal types
type BincodeEncodedPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *BincodeEncodedPayload) Reset() {
	*x = BincodeEncodedPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_narwhal_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BincodeEncodedPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BincodeEncodedPayload) ProtoMessage() {}

func (x *BincodeEncodedPayload) ProtoReflect() protoreflect.Message {
	mi := &file_narwhal_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BincodeEncodedPayload.ProtoReflect.Descriptor instead.
func (*BincodeEncodedPayload) Descriptor() ([]byte, []int) {
	return file_narwhal_proto_rawDescGZIP(), []int{22}
}

func (x *BincodeEncodedPayload) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Empty message for when we don't have anything to return
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_narwhal_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_narwhal_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_narwhal_proto_rawDescGZIP(), []int{23}
}

var File_narwhal_proto protoreflect.FileDescriptor

var file_narwhal_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x22, 0x2b, 0x0a, 0x11, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x25, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x3f, 0x0a, 0x05,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x36, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x61, 0x72,
	0x77, 0x68, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2f, 0x0a,
	0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x71,
	0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6e,
	0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x68, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x10,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x40, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e,
	0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x64, 0x64, 0x72,
	0x52, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x6f, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x3e, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x64, 0x64,
	0x72, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x6f, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x22, 0x25, 0x0a, 0x09, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x21, 0x0a, 0x09, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0xad, 0x01, 0x0a,
	0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x10, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x90, 0x01, 0x0a,
	0x19, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x61, 0x72, 0x77,
	0x68, 0x61, 0x6c, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68,
	0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x5a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x54, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x5d, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73,
	0x22, 0x54, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e,
	0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64, 0x43, 0x61,
	0x75, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22,
	0x42, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x22, 0x56, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x6c, 0x64,
	0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x6e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x60, 0x0a, 0x15, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x61, 0x64, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68,
	0x61, 0x6c, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x5b, 0x0a,
	0x16, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x61, 0x64, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x72, 0x0a, 0x15, 0x4e, 0x65,
	0x77, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x61, 0x72,
	0x77, 0x68, 0x61, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x6c,
	0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68,
	0x61, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x31, 0x0a, 0x15,
	0x42, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x2a, 0x5d, 0x0a, 0x13, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4c,
	0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x32, 0xed, 0x01, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x2e,
	0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x45, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x12, 0x1a,
	0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x61, 0x75,
	0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6e, 0x61, 0x72,
	0x77, 0x68, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x98, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x16,
	0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c,
	0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x51, 0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x61, 0x64, 0x43, 0x61, 0x75, 0x73, 0x61,
	0x6c, 0x12, 0x1e, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x87, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x12, 0x18, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x4e, 0x65, 0x77, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x6e, 0x61, 0x72,
	0x77, 0x68, 0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x0e, 0x4e, 0x65,
	0x77, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x2e, 0x6e,
	0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x4e, 0x65, 0x77, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x6e,
	0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x53, 0x0a, 0x10,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x6f, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x3f, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1e, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x42, 0x69, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a,
	0x0e, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x32, 0xab, 0x01, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x6f, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1e, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x42, 0x69,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x1a, 0x0e, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x6e, 0x61,
	0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x42, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x1e, 0x2e, 0x6e, 0x61,
	0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x42, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x30, 0x01, 0x32,
	0x52, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x6f, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1e, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x42, 0x69, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x1a, 0x0e, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x32, 0x52, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x6f,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e,
	0x42, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x0e, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0x90, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e,
	0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x0e, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x14, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0e, 0x2e, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x28, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_narwhal_proto_rawDescOnce sync.Once
	file_narwhal_proto_rawDescData = file_narwhal_proto_rawDesc
)

func file_narwhal_proto_rawDescGZIP() []byte {
	file_narwhal_proto_rawDescOnce.Do(func() {
		file_narwhal_proto_rawDescData = protoimpl.X.CompressGZIP(file_narwhal_proto_rawDescData)
	})
	return file_narwhal_proto_rawDescData
}

var file_narwhal_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_narwhal_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_narwhal_proto_goTypes = []interface{}{
	(CollectionErrorType)(0),          // 0: narwhal.CollectionErrorType
	(*CertificateDigest)(nil),         // 1: narwhal.CertificateDigest
	(*BatchDigest)(nil),               // 2: narwhal.BatchDigest
	(*Batch)(nil),                     // 3: narwhal.Batch
	(*Transaction)(nil),               // 4: narwhal.Transaction
	(*CollectionError)(nil),           // 5: narwhal.CollectionError
	(*BatchMessage)(nil),              // 6: narwhal.BatchMessage
	(*PrimaryAddresses)(nil),          // 7: narwhal.PrimaryAddresses
	(*MultiAddr)(nil),                 // 8: narwhal.MultiAddr
	(*PublicKey)(nil),                 // 9: narwhal.PublicKey
	(*ValidatorData)(nil),             // 10: narwhal.ValidatorData
	(*CollectionRetrievalResult)(nil), // 11: narwhal.CollectionRetrievalResult
	(*GetCollectionsRequest)(nil),     // 12: narwhal.GetCollectionsRequest
	(*GetCollectionsResponse)(nil),    // 13: narwhal.GetCollectionsResponse
	(*RemoveCollectionsRequest)(nil),  // 14: narwhal.RemoveCollectionsRequest
	(*ReadCausalRequest)(nil),         // 15: narwhal.ReadCausalRequest
	(*ReadCausalResponse)(nil),        // 16: narwhal.ReadCausalResponse
	(*RoundsRequest)(nil),             // 17: narwhal.RoundsRequest
	(*RoundsResponse)(nil),            // 18: narwhal.RoundsResponse
	(*NodeReadCausalRequest)(nil),     // 19: narwhal.NodeReadCausalRequest
	(*NodeReadCausalResponse)(nil),    // 20: narwhal.NodeReadCausalResponse
	(*NewNetworkInfoRequest)(nil),     // 21: narwhal.NewNetworkInfoRequest
	(*NewEpochRequest)(nil),           // 22: narwhal.NewEpochRequest
	(*BincodeEncodedPayload)(nil),     // 23: narwhal.BincodeEncodedPayload
	(*Empty)(nil),                     // 24: narwhal.Empty
}
var file_narwhal_proto_depIdxs = []int32{
	4,  // 0: narwhal.Batch.transaction:type_name -> narwhal.Transaction
	1,  // 1: narwhal.CollectionError.id:type_name -> narwhal.CertificateDigest
	0,  // 2: narwhal.CollectionError.error:type_name -> narwhal.CollectionErrorType
	2,  // 3: narwhal.BatchMessage.id:type_name -> narwhal.BatchDigest
	3,  // 4: narwhal.BatchMessage.transactions:type_name -> narwhal.Batch
	8,  // 5: narwhal.PrimaryAddresses.primary_to_primary:type_name -> narwhal.MultiAddr
	8,  // 6: narwhal.PrimaryAddresses.worker_to_primary:type_name -> narwhal.MultiAddr
	9,  // 7: narwhal.ValidatorData.public_key:type_name -> narwhal.PublicKey
	7,  // 8: narwhal.ValidatorData.primary_addresses:type_name -> narwhal.PrimaryAddresses
	6,  // 9: narwhal.CollectionRetrievalResult.batch:type_name -> narwhal.BatchMessage
	5,  // 10: narwhal.CollectionRetrievalResult.error:type_name -> narwhal.CollectionError
	1,  // 11: narwhal.GetCollectionsRequest.collection_ids:type_name -> narwhal.CertificateDigest
	11, // 12: narwhal.GetCollectionsResponse.result:type_name -> narwhal.CollectionRetrievalResult
	1,  // 13: narwhal.RemoveCollectionsRequest.collection_ids:type_name -> narwhal.CertificateDigest
	1,  // 14: narwhal.ReadCausalRequest.collection_id:type_name -> narwhal.CertificateDigest
	1,  // 15: narwhal.ReadCausalResponse.collection_ids:type_name -> narwhal.CertificateDigest
	9,  // 16: narwhal.RoundsRequest.public_key:type_name -> narwhal.PublicKey
	9,  // 17: narwhal.NodeReadCausalRequest.public_key:type_name -> narwhal.PublicKey
	1,  // 18: narwhal.NodeReadCausalResponse.collection_ids:type_name -> narwhal.CertificateDigest
	10, // 19: narwhal.NewNetworkInfoRequest.validators:type_name -> narwhal.ValidatorData
	10, // 20: narwhal.NewEpochRequest.validators:type_name -> narwhal.ValidatorData
	12, // 21: narwhal.Validator.GetCollections:input_type -> narwhal.GetCollectionsRequest
	14, // 22: narwhal.Validator.RemoveCollections:input_type -> narwhal.RemoveCollectionsRequest
	15, // 23: narwhal.Validator.ReadCausal:input_type -> narwhal.ReadCausalRequest
	17, // 24: narwhal.Proposer.Rounds:input_type -> narwhal.RoundsRequest
	19, // 25: narwhal.Proposer.NodeReadCausal:input_type -> narwhal.NodeReadCausalRequest
	22, // 26: narwhal.Configuration.NewEpoch:input_type -> narwhal.NewEpochRequest
	21, // 27: narwhal.Configuration.NewNetworkInfo:input_type -> narwhal.NewNetworkInfoRequest
	23, // 28: narwhal.PrimaryToPrimary.SendMessage:input_type -> narwhal.BincodeEncodedPayload
	23, // 29: narwhal.WorkerToWorker.SendMessage:input_type -> narwhal.BincodeEncodedPayload
	23, // 30: narwhal.WorkerToWorker.ClientBatchRequest:input_type -> narwhal.BincodeEncodedPayload
	23, // 31: narwhal.WorkerToPrimary.SendMessage:input_type -> narwhal.BincodeEncodedPayload
	23, // 32: narwhal.PrimaryToWorker.SendMessage:input_type -> narwhal.BincodeEncodedPayload
	4,  // 33: narwhal.Transactions.SubmitTransaction:input_type -> narwhal.Transaction
	4,  // 34: narwhal.Transactions.SubmitTransactionStream:input_type -> narwhal.Transaction
	13, // 35: narwhal.Validator.GetCollections:output_type -> narwhal.GetCollectionsResponse
	24, // 36: narwhal.Validator.RemoveCollections:output_type -> narwhal.Empty
	16, // 37: narwhal.Validator.ReadCausal:output_type -> narwhal.ReadCausalResponse
	18, // 38: narwhal.Proposer.Rounds:output_type -> narwhal.RoundsResponse
	20, // 39: narwhal.Proposer.NodeReadCausal:output_type -> narwhal.NodeReadCausalResponse
	24, // 40: narwhal.Configuration.NewEpoch:output_type -> narwhal.Empty
	24, // 41: narwhal.Configuration.NewNetworkInfo:output_type -> narwhal.Empty
	24, // 42: narwhal.PrimaryToPrimary.SendMessage:output_type -> narwhal.Empty
	24, // 43: narwhal.WorkerToWorker.SendMessage:output_type -> narwhal.Empty
	23, // 44: narwhal.WorkerToWorker.ClientBatchRequest:output_type -> narwhal.BincodeEncodedPayload
	24, // 45: narwhal.WorkerToPrimary.SendMessage:output_type -> narwhal.Empty
	24, // 46: narwhal.PrimaryToWorker.SendMessage:output_type -> narwhal.Empty
	24, // 47: narwhal.Transactions.SubmitTransaction:output_type -> narwhal.Empty
	24, // 48: narwhal.Transactions.SubmitTransactionStream:output_type -> narwhal.Empty
	35, // [35:49] is the sub-list for method output_type
	21, // [21:35] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_narwhal_proto_init() }
func file_narwhal_proto_init() {
	if File_narwhal_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_narwhal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateDigest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_narwhal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDigest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_narwhal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_narwhal_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_narwhal_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_narwhal_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_narwhal_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrimaryAddresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_narwhal_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_narwhal_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_narwhal_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_narwhal_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionRetrievalResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_narwhal_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_narwhal_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_narwhal_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveCollectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_narwhal_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadCausalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_narwhal_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadCausalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_narwhal_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_narwhal_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_narwhal_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeReadCausalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_narwhal_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeReadCausalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_narwhal_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewNetworkInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_narwhal_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewEpochRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_narwhal_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BincodeEncodedPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_narwhal_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_narwhal_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*CollectionRetrievalResult_Batch)(nil),
		(*CollectionRetrievalResult_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_narwhal_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   8,
		},
		GoTypes:           file_narwhal_proto_goTypes,
		DependencyIndexes: file_narwhal_proto_depIdxs,
		EnumInfos:         file_narwhal_proto_enumTypes,
		MessageInfos:      file_narwhal_proto_msgTypes,
	}.Build()
	File_narwhal_proto = out.File
	file_narwhal_proto_rawDesc = nil
	file_narwhal_proto_goTypes = nil
	file_narwhal_proto_depIdxs = nil
}
